{"version":3,"file":"static/js/245.67896975.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/App.styled.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const getAllContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter;\n\nexport const getFilterContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  /* height: 100vh; */\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  /* justify-content: center; */\n  align-items: center;\n  font-size: 30px;\n  color: #010101;\n`;\n\nexport const ContactTitle = styled.h1`\n  font-size: 50px;\n  margin-bottom: 30px;\n`;\n\nexport const ContactTitleSecond = styled.h2`\n  font-size: 40px;\n  margin-bottom: 30px;\n`;\n","import { Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormBox = styled(Form)`\n  margin-bottom: 30px;\n  padding: 30px;\n  background-color: #fcfeffd4;\n  color: var(--primary-text-color);\n  border: 1px solid var(--input-text-color);\n  border-radius: 10px;\n  font-size: 20px;\n  width: 500px;\n  line-height: 1.2;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  width: 100%;\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled(Field)`\n  display: block;\n  width: 400px;\n  height: 50px;\n  padding: 10px;\n  margin-bottom: 20px;\n  border: 1px solid var(--input-text-color);\n  border-radius: 4px;\n  line-height: 2;\n  transition: all 250ms linear;\n  cursor: pointer;\n\n  &:hover,\n  :focus {\n    border: 1px solid var(--acent-color);\n  }\n`;\nexport const FormBtn = styled.button`\n  padding: 5px 24px;\n  margin-top: 30px;\n  border: 1px solid var(--acent-color);\n  border-radius: 10px;\n  font-size: 20px;\n  line-height: 1.8;\n  background-color: #fff;\n  color: var(--acent-color);\n  transition: all 250ms linear;\n  cursor: pointer;\n\n  &:hover {\n    background-color: var(--acent-color);\n    color: var(--container-bg-color);\n  }\n`;\n","import React from 'react';\nimport { Formik } from 'formik';\nimport { FormBox, Label, Input, FormBtn } from './ContactForm.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getAllContacts } from 'redux/contacts/selectors';\n// import { Button, Menu, MenuItem } from '@mui/material';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const contacts = useSelector(getAllContacts);\n  const dispatch = useDispatch();\n\n  const handelSubmit = (values, { resetForm }) => {\n    if (contacts.find(({ name }) => name === values.name)) {\n      alert(`${values.name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact({ ...values }));\n    resetForm();\n  };\n\n  return (\n    <Formik initialValues={initialValues} onSubmit={handelSubmit}>\n      <FormBox autoComplete=\"off\">\n        <Label htmlFor=\"firstName\">Name</Label>\n        <Input\n          id=\"firstName\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <Label htmlFor=\"tel\">Number</Label>\n        <Input\n          id=\"tel\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <FormBtn type=\"submit\">Add contact</FormBtn>\n        {/* <Button variant=\"outlined\">Add contact</Button> */}\n      </FormBox>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  font-size: 24px;\n  margin-bottom: 10px;\n  line-height: 1.2;\n`;\n\nexport const ContactBtn = styled.button`\n  padding: 2px 10px;\n  background-color: #fff;\n  margin-left: 10px;\n  border: 1px solid #a7a3a3;\n  border-radius: 4px;\n  font-size: 16px;\n  line-height: 1.2;\n  cursor: pointer;\n\n  &:hover,\n  :focus {\n    background-color: #126deb;\n    color: #fff;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Item, ContactBtn } from './ContactListItem.styled';\n\nexport const ContactListItem = ({ name, number, deleteContact }) => {\n  return (\n    <Item>\n      {name}: {number}\n      <ContactBtn onClick={deleteContact}>Delete</ContactBtn>\n    </Item>\n  );\n};\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { getFilterContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getFilterContacts);\n\n  return (\n    <ul>\n      {contacts.map(({ name, number, id }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          deleteContact={() => dispatch(deleteContact(id))}\n        />\n      ))}\n    </ul>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: block;\n  width: 400px;\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 400px;\n  height: 50px;\n  padding: 10px;\n  margin-bottom: 20px;\n  background-color: #fcfeffd4;\n  border: 1px solid var(--input-text-color);\n  border-radius: 4px;\n  font-size: 20px;\n  width: 400px;\n  line-height: 1.2;\n  transition: all 250ms linear;\n  cursor: pointer;\n\n  &:hover,\n  :focus {\n    border: 1px solid var(--acent-color);\n  }\n`;\n","import { Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { getFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilter);\n\n  return (\n    <>\n      <Input\n        id=\"filter\"\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Введіть ім'я друзяки\"\n        onChange={e => dispatch(setFilter(e.target.value))}\n        value={value}\n      />\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getError, getIsLoading } from 'redux/contacts/selectors';\nimport {\n  Container,\n  ContactTitle,\n  ContactTitleSecond,\n} from '../components/App.styled';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { Loader } from '../components/Loader/Loader';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <ContactTitle>Phonebook</ContactTitle>\n      <ContactForm />\n      <ContactTitleSecond>Contacts</ContactTitleSecond>\n      <Filter />\n      {isLoading && !error && <Loader />}\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["getAllContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilter","filter","getFilterContacts","createSelector","name","toLowerCase","includes","Container","styled","ContactTitle","ContactTitleSecond","FormBox","Form","Label","Input","Field","FormBtn","initialValues","number","ContactForm","useSelector","dispatch","useDispatch","onSubmit","values","resetForm","find","alert","addContact","autoComplete","htmlFor","id","type","pattern","title","required","Item","ContactBtn","ContactListItem","deleteContact","onClick","ContactList","map","Filter","value","placeholder","onChange","e","setFilter","target","useEffect","fetchContacts","Loader"],"sourceRoot":""}